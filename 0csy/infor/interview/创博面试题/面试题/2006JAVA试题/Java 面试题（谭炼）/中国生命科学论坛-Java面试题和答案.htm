<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0056)http://www.bioon.net/printpage.asp?BoardID=169&ID=108010 -->
<!--HTTP头--><HTML><HEAD><TITLE>中国生命科学论坛-Java面试题和答案</TITLE>
<META http-equiv=Content-Type content="text/html; charset=gb2312">
<META content=生物，生物谷，生命科学，中国生命科学论坛，医学，生物医学 name=keywords>
<META 
content=中国生命科学论坛，是专业的生命科学，包括生物学，医学和药学的学生，工作人员和科研人员交流的重要站点，内容涵盖生命科学（生物医学，药学和农学）重要的学科，内容丰富，更新速度快。 
name=description><!--默认风格-->
<STYLE type=text/css>A:link {
	COLOR: #000000; TEXT-DECORATION: none
}
A:active {
	COLOR: #000000; TEXT-DECORATION: none
}
A:hover {
	COLOR: #4455aa; TEXT-DECORATION: underline
}
A:visited {
	COLOR: #fc7302; TEXT-DECORATION: none
}
BODY {
	SCROLLBAR-FACE-COLOR: #dee3e7; FONT-SIZE: 12px; SCROLLBAR-HIGHLIGHT-COLOR: #ffffff; SCROLLBAR-SHADOW-COLOR: #dee3e7; COLOR: #000000; SCROLLBAR-3DLIGHT-COLOR: #d1d7dc; SCROLLBAR-ARROW-COLOR: #006699; SCROLLBAR-TRACK-COLOR: #efefef; FONT-FAMILY: 宋体; SCROLLBAR-DARKSHADOW-COLOR: #98aab1
}
FONT {
	LINE-HEIGHT: normal
}
TD {
	FONT-SIZE: 12px; LINE-HEIGHT: 15px; FONT-FAMILY: 宋体
}
TH {
	FONT-WEIGHT: bold; FONT-SIZE: 12px; BACKGROUND-IMAGE: url(Skins/Default/css/default/bg1.gif); COLOR: white; BACKGROUND-COLOR: #4455aa
}
TD.TableTitle2 {
	BACKGROUND-COLOR: #e4e8ef
}
TD.TableBody1 {
	LINE-HEIGHT: normal; BACKGROUND-COLOR: #ffffff
}
TD.TableBody2 {
	LINE-HEIGHT: normal; BACKGROUND-COLOR: #e4e8ef
}
TD.TopDarkNav {
	BACKGROUND-IMAGE: url(Skins/Default/css/default/topbg.gif)
}
TD.TopLighNav {
	BACKGROUND-IMAGE: url(Skins/Default/css/default/bottombg.gif)
}
TD.TopLighNav1 {
	BACKGROUND-IMAGE: url(Skins/Default/css/default/tabs_m_tile.gif)
}
TD.TopLighNav2 {
	BACKGROUND-COLOR: #ffffff
}
.tableBorder1 {
	BORDER-RIGHT: 1px; BORDER-TOP: 1px; BORDER-LEFT: 1px; WIDTH: 98%; BORDER-BOTTOM: 1px; BACKGROUND-COLOR: #6595d6
}
.tableBorder2 {
	BORDER-RIGHT: #dedede 1px solid; BORDER-TOP: #dedede 1px solid; BORDER-LEFT: #dedede 1px solid; WIDTH: 98%; BORDER-BOTTOM: #dedede 1px solid; BACKGROUND-COLOR: #efefef
}
#TableTitleLink A:link {
	COLOR: #ffffff; TEXT-DECORATION: none
}
#TableTitleLink A:visited {
	COLOR: #ffffff; TEXT-DECORATION: none
}
#TableTitleLink A:active {
	COLOR: #ffffff; TEXT-DECORATION: none
}
#TableTitleLink A:hover {
	COLOR: #ffffff; TEXT-DECORATION: underline
}
INPUT {
	FONT-SIZE: 12px; COLOR: #000000; LINE-HEIGHT: 15px; FONT-FAMILY: Tahoma,Verdana,"宋体"
}
SELECT {
	FONT-SIZE: 12px; COLOR: #000000; LINE-HEIGHT: 15px; FONT-FAMILY: Tahoma,Verdana,"宋体"
}
TEXTAREA {
	FONT-SIZE: 12px; COLOR: #000000; LINE-HEIGHT: 15px; FONT-FAMILY: Tahoma,Verdana,"宋体"
}
OPTION {
	FONT-SIZE: 12px; COLOR: #000000; LINE-HEIGHT: 15px; FONT-FAMILY: Tahoma,Verdana,"宋体"
}
.normalTextSmall {
	FONT-SIZE: 11px; COLOR: #000000; FONT-FAMILY: Verdana, Arial, Helvetica, sans-serif
}
.menuskin {
	BORDER-RIGHT: #666666 1px solid; BORDER-TOP: #666666 1px solid; BACKGROUND-IMAGE: url(Skins/Default/dvmenubg3.gif); VISIBILITY: hidden; FONT: 12px Verdana; BORDER-LEFT: #666666 1px solid; BORDER-BOTTOM: #666666 1px solid; BACKGROUND-REPEAT: repeat-y; POSITION: absolute; BACKGROUND-COLOR: #efefef
}
.menuskin A {
	PADDING-RIGHT: 10px; PADDING-LEFT: 25px; BEHAVIOR: url(inc/noline.htc); COLOR: black; TEXT-DECORATION: none
}
#mouseoverstyle {
	BORDER-RIGHT: #597db5 1px solid; PADDING-RIGHT: 0px; BORDER-TOP: #597db5 1px solid; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: 2px; BORDER-LEFT: #597db5 1px solid; PADDING-TOP: 0px; BORDER-BOTTOM: #597db5 1px solid; BACKGROUND-COLOR: #c9d5e7
}
#mouseoverstyle A {
	COLOR: black
}
.menuitems {
	PADDING-RIGHT: 1px; PADDING-LEFT: 1px; PADDING-BOTTOM: 1px; MARGIN: 2px; WORD-BREAK: keep-all; PADDING-TOP: 1px
}
A.navlink:link {
	COLOR: #0000ff; TEXT-DECORATION: underline
}
A.navlink:visited {
	COLOR: #800080; TEXT-DECORATION: none
}
A.navlink:hover {
	COLOR: #003399; TEXT-DECORATION: none
}
.BrightClass {
	BACKGROUND-COLOR: #d7d7d7
}
DIV.quote {
	BORDER-RIGHT: #cccccc 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #cccccc 1px solid; PADDING-LEFT: 5px; BACKGROUND: #f3f3f3; PADDING-BOTTOM: 5px; MARGIN: 5px 20px; BORDER-LEFT: #cccccc 1px solid; LINE-HEIGHT: normal; PADDING-TOP: 5px; BORDER-BOTTOM: #cccccc 1px solid
}
DIV.HtmlCode {
	BORDER-RIGHT: #cccccc 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #cccccc 1px solid; PADDING-LEFT: 5px; FONT-WEIGHT: bold; FONT-SIZE: 14px; BACKGROUND: #fdfddf; PADDING-BOTTOM: 5px; MARGIN: 5px 20px; BORDER-LEFT: #cccccc 1px solid; LINE-HEIGHT: normal; PADDING-TOP: 5px; BORDER-BOTTOM: #cccccc 1px solid; FONT-STYLE: oblique; FONT-FAMILY: Tahoma
}
</STYLE>
<!--论坛页面开始代码-->
<SCRIPT language=JavaScript src="中国生命科学论坛-Java面试题和答案.files/Main.js"></SCRIPT>

<META content="MSHTML 6.00.2800.1505" name=GENERATOR></HEAD>
<BODY leftMargin=0 topMargin=0>
<DIV class=menuskin id=popmenu 
onmouseover="clearhidemenu();highlightmenu(event,'on')" style="Z-INDEX: 100" 
onmouseout="highlightmenu(event,'off');dynamichide(event)"></DIV><!--printpage.asp##帖子可打印页面-->
<TABLE style="TABLE-LAYOUT: fixed; WORD-BREAK: break-all" width="98%" 
align=center border=0>
  <TBODY>
  <TR>
    <TD vAlign=center 
      align=top><B>以文本方式查看主题</B><BR><BR>-&nbsp;&nbsp;<B>中国生命科学论坛</B>&nbsp;&nbsp;(http://www.bioon.net/index.asp)<BR>--&nbsp;&nbsp;<B>新手快乐成长版</B>&nbsp;&nbsp;(http://www.bioon.net/list.asp?boardid=169)<BR>----&nbsp;&nbsp;<B>Java面试题和答案</B>&nbsp;&nbsp;(http://www.bioon.net/dispbbs.asp?boardid=169&amp;id=108010)<BR>
      <HR>
    </TD></TR><!--printpage.asp##{$bbslist}循环部分-->
  <TR>
    <TD vAlign=center 
      align=top>--&nbsp;&nbsp;作者：jiajia1983<BR>--&nbsp;&nbsp;发布时间：2005-3-9 
      17:29:00<BR><BR>--&nbsp;&nbsp;Java面试题和答案<BR>JAVA相关基础知识<BR>1、面向对象的特征有哪些方面&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>1.抽象：<BR>抽象就是忽略一个主题中与当前目标无关的那些方面，以便更充分地注意与当前目标有关的方面。抽象并不打算了解全部问题，而只是选择其中的一部分，暂时不用部分细节。抽象包括两个方面，一是过程抽象，二是数据抽象。<BR>2.继承：<BR>继承是一种联结类的层次模型，并且允许和鼓励类的重用，它提供了一种明确表述共性的方法。对象的一个新类可以从现有的类中派生，这个过程称为类继承。新类继承了原始类的特性，新类称为原始类的派生类（子类），而原始类称为新类的基类（父类）。派生类可以从它的基类那里继承方法和实例变量，并且类可以修改或增加新的方法使之更适合特殊的需要。<BR>3.封装：<BR>封装是把过程和数据包围起来，对数据的访问只能通过已定义的界面。面向对象计算始于这个基本概念，即现实世界可以被描绘成一系列完全自治、封装的对象，这些对象通过一个受保护的接口访问其他对象。<BR>4.&nbsp;&nbsp;多态性：<BR>多态性是指允许不同类的对象对同一消息作出响应。多态性包括参数化多态性和包含多态性。多态性语言具有灵活、抽象、行为共享、代码共享的优势，很好的解决了应用程序函数同名问题。<BR>2、String是最基本的数据类型吗?<BR>基本数据类型包括byte、int、char、long、float、double、boolean和short。<BR>java.lang.String类是final类型的，因此不可以继承这个类、不能修改这个类。为了提高效率节省空间，我们应该用StringBuffer类<BR>3、int&nbsp;&nbsp;和&nbsp;&nbsp;Integer&nbsp;&nbsp;有什么区别<BR>Java&nbsp;&nbsp;提供两种不同的类型：引用类型和原始类型（或内置类型）。Int是java的原始数据类型，Integer是java为int提供的封装类。Java为每个原始类型提供了封装类。<BR>原始类型 
      封装类<BR>boolean Boolean<BR>char Character<BR>byte Byte<BR>short 
      Short<BR>int Integer<BR>long Long<BR>float Float<BR>double 
      Double<BR>引用类型和原始类型的行为完全不同，并且它们具有不同的语义。引用类型和原始类型具有不同的特征和用法，它们包括：大小和速度问题，这种类型以哪种类型的数据结构存储，当引用类型和原始类型用作某个类的实例数据时所指定的缺省值。对象引用实例变量的缺省值为&nbsp;&nbsp;null，而原始类型实例变量的缺省值与它们的类型有关。<BR>4、String&nbsp;&nbsp;和StringBuffer的区别<BR>JAVA平台提供了两个类：String和StringBuffer，它们可以储存和操作字符串，即包含多个字符的字符数据。这个String类提供了数值不可改变的字符串。而这个StringBuffer类提供的字符串进行修改。当你知道字符数据要改变的时候你就可以使用StringBuffer。典型地，你可以使用StringBuffers来动态构造字符数据。<BR>5、运行时异常与一般异常有何异同？<BR>异常表示程序运行过程中可能出现的非正常状态，运行时异常表示虚拟机的通常操作中可能遇到的异常，是一种常见运行错误。java编译器要求方法必须声明抛出可能发生的非运行时异常，但是并不要求必须声明抛出未被捕获的运行时异常。<BR>6、说出Servlet的生命周期，并说出Servlet和CGI的区别。<BR>Servlet被服务器实例化后，容器运行其init方法，请求到达时运行其service方法，service方法自动派遣运行与请求对应的doXXX方法（doGet，doPost）等，当服务器决定将实例销毁的时候调用其destroy方法。<BR>与cgi的区别在于servlet处于服务器进程中，它通过多线程方式运行其service方法，一个实例可以服务于多个请求，并且其实例一般不会销毁，而CGI对每个请求都产生新的进程，服务完成后就销毁，所以效率上低于servlet。<BR>7、说出ArrayList,Vector,&nbsp;&nbsp;LinkedList的存储性能和特性<BR>ArrayList和Vector都是使用数组方式存储数据，此数组元素数大于实际存储的数据以便增加和插入元素，它们都允许直接按序号索引元素，但是插入元素要涉及数组元素移动等内存操作，所以索引数据快而插入数据慢，Vector由于使用了synchronized方法（线程安全），通常性能上较ArrayList差，而LinkedList使用双向链表实现存储，按序号索引数据需要进行前向或后向遍历，但是插入数据时只需要记录本项的前后项即可，所以插入速度较快。<BR>8、EJB是基于哪些技术实现的？并说出SessionBean和EntityBean的区别，StatefulBean和StatelessBean的区别。<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      EJB包括Session&nbsp;&nbsp;Bean、Entity&nbsp;&nbsp;Bean、Message&nbsp;&nbsp;Driven&nbsp;&nbsp;Bean，基于JNDI、RMI、JAT等技术实现。<BR>SessionBean在J2EE应用程序中被用来完成一些服务器端的业务操作，例如访问数据库、调用其他EJB组件。EntityBean被用来代表应用系统中用到的数据。<BR>对于客户机，SessionBean是一种非持久性对象，它实现某些在服务器上运行的业务逻辑。<BR>对于客户机，EntityBean是一种持久性对象，它代表一个存储在持久性存储器中的实体的对象视图，或是一个由现有企业应用程序实现的实体。<BR>Session&nbsp;&nbsp;Bean&nbsp;&nbsp;还可以再细分为&nbsp;&nbsp;Stateful&nbsp;&nbsp;Session&nbsp;&nbsp;Bean&nbsp;&nbsp;与&nbsp;&nbsp;Stateless&nbsp;&nbsp;Session&nbsp;&nbsp;Bean&nbsp;&nbsp;，这两种的&nbsp;&nbsp;Session&nbsp;&nbsp;Bean都可以将系统逻辑放在&nbsp;&nbsp;method之中执行，不同的是&nbsp;&nbsp;Stateful&nbsp;&nbsp;Session&nbsp;&nbsp;Bean&nbsp;&nbsp;可以记录呼叫者的状态，因此通常来说，一个使用者会有一个相对应的&nbsp;&nbsp;Stateful&nbsp;&nbsp;Session&nbsp;&nbsp;Bean&nbsp;&nbsp;的实体。Stateless&nbsp;&nbsp;Session&nbsp;&nbsp;Bean&nbsp;&nbsp;虽然也是逻辑组件，但是他却不负责记录使用者状态，也就是说当使用者呼叫&nbsp;&nbsp;Stateless&nbsp;&nbsp;Session&nbsp;&nbsp;Bean&nbsp;&nbsp;的时候，EJB&nbsp;&nbsp;Container&nbsp;&nbsp;并不会找寻特定的&nbsp;&nbsp;Stateless&nbsp;&nbsp;Session&nbsp;&nbsp;Bean&nbsp;&nbsp;的实体来执行这个&nbsp;&nbsp;method。换言之，很可能数个使用者在执行某个&nbsp;&nbsp;Stateless&nbsp;&nbsp;Session&nbsp;&nbsp;Bean&nbsp;&nbsp;的&nbsp;&nbsp;methods&nbsp;&nbsp;时，会是同一个&nbsp;&nbsp;Bean&nbsp;&nbsp;的&nbsp;&nbsp;Instance&nbsp;&nbsp;在执行。从内存方面来看，&nbsp;&nbsp;Stateful&nbsp;&nbsp;Session&nbsp;&nbsp;Bean&nbsp;&nbsp;与&nbsp;&nbsp;Stateless&nbsp;&nbsp;Session&nbsp;&nbsp;Bean&nbsp;&nbsp;比较，&nbsp;&nbsp;Stateful&nbsp;&nbsp;Session&nbsp;&nbsp;Bean&nbsp;&nbsp;会消耗&nbsp;&nbsp;J2EE&nbsp;&nbsp;Server&nbsp;&nbsp;较多的内存，然而&nbsp;&nbsp;Stateful&nbsp;&nbsp;Session&nbsp;&nbsp;Bean&nbsp;&nbsp;的优势却在于他可以维持使用者的状态。<BR>9、Collection&nbsp;&nbsp;和&nbsp;&nbsp;Collections的区别。&nbsp;&nbsp;<BR>　　Collection是集合类的上级接口，继承与他的接口主要有Set&nbsp;&nbsp;和List.<BR>Collections是针对集合类的一个帮助类，他提供一系列静态方法实现对各种集合的搜索、排序、线程安全化等操作。<BR>10、&amp;和&amp;&amp;的区别。&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      &amp;是位运算符，表示按位与运算，&amp;&amp;是逻辑运算符，表示逻辑与（and）。<BR>11、HashMap和Hashtable的区别。&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      HashMap是Hashtable的轻量级实现（非线程安全的实现），他们都完成了Map接口，主要区别在于HashMap允许空（null）键值（key）,由于非线程安全，效率上可能高于Hashtable。<BR>HashMap允许将null作为一个entry的key或者value，而Hashtable不允许。<BR>HashMap把Hashtable的contains方法去掉了，改成containsvalue和containsKey。因为contains方法容易让人引起误解。&nbsp;&nbsp;<BR>Hashtable继承自Dictionary类，而HashMap是Java1.2引进的Map&nbsp;&nbsp;interface的一个实现。<BR>最大的不同是，Hashtable的方法是Synchronize的，而HashMap不是，在多个线程访问Hashtable时，不需要自己为它的方法实现同步，而HashMap&nbsp;&nbsp;就必须为之提供外同步。&nbsp;&nbsp;<BR>Hashtable和HashMap采用的hash/rehash算法都大概一样，所以性能不会有很大的差异。<BR>12、final,&nbsp;&nbsp;finally,&nbsp;&nbsp;finalize的区别。&nbsp;&nbsp;<BR>　　final&nbsp;&nbsp;用于声明属性，方法和类，分别表示属性不可变，方法不可覆盖，类不可继承。<BR>finally是异常处理语句结构的一部分，表示总是执行。<BR>finalize是Object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的此方法，可以覆盖此方法提供垃圾收集时的其他资源回收，例如关闭文件等。<BR>13、sleep()&nbsp;&nbsp;和&nbsp;&nbsp;wait()&nbsp;&nbsp;有什么区别?&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      sleep是线程类（Thread）的方法，导致此线程暂停执行指定时间，给执行机会给其他线程，但是监控状态依然保持，到时后会自动恢复。调用sleep不会释放对象锁。<BR>wait是Object类的方法，对此对象调用wait方法导致本线程放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象发出notify方法（或notifyAll）后本线程才进入对象锁定池准备获得对象锁进入运行状态。<BR>14、Overload和Override的区别。Overloaded的方法是否可以改变返回值的类型?<BR>方法的重写Overriding和重载Overloading是Java多态性的不同表现。重写Overriding是父类与子类之间多态性的一种表现，重载Overloading是一个类中多态性的一种表现。如果在子类中定义某方法与其父类有相同的名称和参数，我们说该方法被重写&nbsp;&nbsp;(Overriding)。子类的对象使用这个方法时，将调用子类中的定义，对它而言，父类中的定义如同被“屏蔽”了。如果在一个类中定义了多个同名的方法，它们或有不同的参数个数或有不同的参数类型，则称为方法的重载(Overloading)。Overloaded的方法是可以改变返回值的类型。<BR>15、error和exception有什么区别?<BR>error&nbsp;&nbsp;表示恢复不是不可能但很困难的情况下的一种严重问题。比如说内存溢出。不可能指望程序能处理这样的情况。<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      exception&nbsp;&nbsp;表示一种设计或实现问题。也就是说，它表示如果程序运行正常，从不会发生的情况。&nbsp;&nbsp;<BR>16、同步和异步有何异同，在什么情况下分别使用他们？举例说明。<BR>如果数据将在线程间共享。例如正在写的数据以后可能被另一个线程读到，或者正在读的数据可能已经被另一个线程写过了，那么这些数据就是共享数据，必须进行同步存取。<BR>当应用程序在对象上调用了一个需要花费很长时间来执行的方法，并且不希望让程序等待方法的返回时，就应该使用异步编程，在很多情况下采用异步途径往往更有效率。<BR>17、abstract&nbsp;&nbsp;class和interface有什么区别?<BR>声明方法的存在而不去实现它的类被叫做抽象类（abstract&nbsp;&nbsp;class），它用于要创建一个体现某些基本行为的类，并为该类声明方法，但不能在该类中实现该类的情况。不能创建abstract&nbsp;&nbsp;类的实例。然而可以创建一个变量，其类型是一个抽象类，并让它指向具体子类的一个实例。不能有抽象构造函数或抽象静态方法。Abstract&nbsp;&nbsp;类的子类为它们父类中的所有抽象方法提供实现，否则它们也是抽象类为。取而代之，在子类中实现该方法。知道其行为的其它类可以在类中实现这些方法。<BR>接口（interface）是抽象类的变体。在接口中，所有方法都是抽象的。多继承性可通过实现这样的接口而获得。接口中的所有方法都是抽象的，没有一个有程序体。接口只可以定义static&nbsp;&nbsp;final成员变量。接口的实现与子类相似，除了该实现类不能从接口定义中继承行为。当类实现特殊接口时，它定义（即将程序体给予）所有这种接口的方法。然后，它可以在实现了该接口的类的任何对象上调用接口的方法。由于有抽象类，它允许使用接口名作为引用变量的类型。通常的动态联编将生效。引用可以转换到接口类型或从接口类型转换，instanceof&nbsp;&nbsp;运算符可以用来决定某对象的类是否实现了接口。<BR>18、heap和stack有什么区别。<BR>栈是一种线形集合，其添加和删除元素的操作应在同一段完成。栈按照后进先出的方式进行处理。<BR>堆是栈的一个组成元素<BR>19、forward&nbsp;&nbsp;和redirect的区别<BR>forward是服务器请求资源，服务器直接访问目标地址的URL，把那个URL的响应内容读取过来，然后把这些内容再发给浏览器，浏览器根本不知道服务器发送的内容是从哪儿来的，所以它的地址栏中还是原来的地址。<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      redirect就是服务端根据逻辑,发送一个状态码,告诉浏览器重新去请求那个地址，一般来说浏览器会用刚才请求的所有参数重新请求，所以session,request参数都可以获取。<BR>20、EJB与JAVA&nbsp;&nbsp;BEAN的区别？<BR>Java&nbsp;&nbsp;Bean&nbsp;&nbsp;是可复用的组件，对Java&nbsp;&nbsp;Bean并没有严格的规范，理论上讲，任何一个Java类都可以是一个Bean。但通常情况下，由于Java&nbsp;&nbsp;Bean是被容器所创建（如Tomcat）的，所以Java&nbsp;&nbsp;Bean应具有一个无参的构造器，另外，通常Java&nbsp;&nbsp;Bean还要实现Serializable接口用于实现Bean的持久性。Java&nbsp;&nbsp;Bean实际上相当于微软COM模型中的本地进程内COM组件，它是不能被跨进程访问的。Enterprise&nbsp;&nbsp;Java&nbsp;&nbsp;Bean&nbsp;&nbsp;相当于DCOM，即分布式组件。它是基于Java的远程方法调用（RMI）技术的，所以EJB可以被远程访问（跨进程、跨计算机）。但EJB必须被布署在诸如Webspere、WebLogic这样的容器中，EJB客户从不直接访问真正的EJB组件，而是通过其容器访问。EJB容器是EJB组件的代理，EJB组件由容器所创建和管理。客户通过容器来访问真正的EJB组件。<BR>21、Static&nbsp;&nbsp;Nested&nbsp;&nbsp;Class&nbsp;&nbsp;和&nbsp;&nbsp;Inner&nbsp;&nbsp;Class的不同。&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      Static&nbsp;&nbsp;Nested&nbsp;&nbsp;Class是被声明为静态（static）的内部类，它可以不依赖于外部类实例被实例化。而通常的内部类需要在外部类实例化后才能实例化。<BR>22、JSP中动态INCLUDE与静态INCLUDE的区别？<BR>动态INCLUDE用jsp:include动作实现&nbsp;&nbsp;&lt;jsp:include&nbsp;&nbsp;page="included.jsp"&nbsp;&nbsp;flush="true"&nbsp;&nbsp;/&gt;它总是会检查所含文件中的变化，适合用于包含动态页面，并且可以带参数。<BR>静态INCLUDE用include伪码实现,定不会检查所含文件的变化，适用于包含静态页面&lt;%@&nbsp;&nbsp;include&nbsp;&nbsp;file="included.htm"&nbsp;&nbsp;%&gt;&nbsp;&nbsp;<BR>23、什么时候用assert。&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      assertion(断言)在软件开发中是一种常用的调试方式，很多开发语言中都支持这种机制。在实现中，assertion就是在程序中的一条语句，它对一个boolean表达式进行检查，一个正确程序必须保证这个boolean表达式的值为true；如果该值为false，说明程序已经处于不正确的状态下，系统将给出警告或退出。一般来说，assertion用于保证程序最基本、关键的正确性。assertion检查通常在开发和测试时开启。为了提高性能，在软件发布后，assertion检查通常是关闭的。<BR>24、GC是什么?&nbsp;&nbsp;为什么要有GC?&nbsp;&nbsp;<BR>　　GC是垃圾收集的意思（Gabage&nbsp;&nbsp;Collection）,内存处理是编程人员容易出现问题的地方，忘记或者错误的内存回收会导致程序或系统的不稳定甚至崩溃，Java提供的GC功能可以自动监测对象是否超过作用域从而达到自动回收内存的目的，Java语言没有提供释放已分配内存的显示操作方法。&nbsp;&nbsp;<BR>25、short&nbsp;&nbsp;s1&nbsp;&nbsp;=&nbsp;&nbsp;1;&nbsp;&nbsp;s1&nbsp;&nbsp;=&nbsp;&nbsp;s1&nbsp;&nbsp;+&nbsp;&nbsp;1;有什么错?&nbsp;&nbsp;short&nbsp;&nbsp;s1&nbsp;&nbsp;=&nbsp;&nbsp;1;&nbsp;&nbsp;s1&nbsp;&nbsp;+=&nbsp;&nbsp;1;有什么错?&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      short&nbsp;&nbsp;s1&nbsp;&nbsp;=&nbsp;&nbsp;1;&nbsp;&nbsp;s1&nbsp;&nbsp;=&nbsp;&nbsp;s1&nbsp;&nbsp;+&nbsp;&nbsp;1;&nbsp;&nbsp;（s1+1运算结果是int型，需要强制转换类型）<BR>short&nbsp;&nbsp;s1&nbsp;&nbsp;=&nbsp;&nbsp;1;&nbsp;&nbsp;s1&nbsp;&nbsp;+=&nbsp;&nbsp;1;（可以正确编译）<BR>26、Math.round(11.5)等於多少?&nbsp;&nbsp;Math.round(-11.5)等於多少?&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      Math.round(11.5)==12<BR>Math.round(-11.5)==-11<BR>round方法返回与参数最接近的长整数，参数加1/2后求其floor.<BR>27、String&nbsp;&nbsp;s&nbsp;&nbsp;=&nbsp;&nbsp;new&nbsp;&nbsp;String("xyz");创建了几个String&nbsp;&nbsp;Object?&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      两个<BR>28、设计4个线程，其中两个线程每次对j增加1，另外两个线程对j每次减少1。写出程序。<BR>以下程序使用内部类实现线程，对j增减的时候没有考虑顺序问题。<BR>public&nbsp;&nbsp;class&nbsp;&nbsp;ThreadTest1{<BR>&nbsp;&nbsp; 
      private&nbsp;&nbsp;int&nbsp;&nbsp;j;<BR>&nbsp;&nbsp; 
      public&nbsp;&nbsp;static&nbsp;&nbsp;void&nbsp;&nbsp;main(String&nbsp;&nbsp;args[]){<BR>ThreadTest1&nbsp;&nbsp;tt=new&nbsp;&nbsp;ThreadTest1();<BR>Inc&nbsp;&nbsp;inc=tt.new&nbsp;&nbsp;Inc();<BR>Dec&nbsp;&nbsp;dec=tt.new&nbsp;&nbsp;Dec();<BR>for(int&nbsp;&nbsp;i=0;i&lt;2;i++){<BR>Thread&nbsp;&nbsp;t=new&nbsp;&nbsp;Thread(inc);<BR>t.start();<BR>t=new&nbsp;&nbsp;Thread(dec);<BR>t.start();<BR>}<BR>}<BR>&nbsp;&nbsp; 
      private&nbsp;&nbsp;synchronized&nbsp;&nbsp;void&nbsp;&nbsp;inc(){<BR>j++;<BR>System.out.println(Thread.currentThread().getName()+"-inc:"+j);<BR>&nbsp;&nbsp; 
      }<BR>&nbsp;&nbsp; 
      private&nbsp;&nbsp;synchronized&nbsp;&nbsp;void&nbsp;&nbsp;dec(){<BR>j--;<BR>System.out.println(Thread.currentThread().getName()+"-dec:"+j);<BR>&nbsp;&nbsp; 
      }<BR>&nbsp;&nbsp; 
      class&nbsp;&nbsp;Inc&nbsp;&nbsp;implements&nbsp;&nbsp;Runnable{<BR>public&nbsp;&nbsp;void&nbsp;&nbsp;run(){<BR>for(int&nbsp;&nbsp;i=0;i&lt;100;i++){<BR>inc();<BR>}<BR>}<BR>&nbsp;&nbsp; 
      }<BR>&nbsp;&nbsp; 
      class&nbsp;&nbsp;Dec&nbsp;&nbsp;implements&nbsp;&nbsp;Runnable{<BR>public&nbsp;&nbsp;void&nbsp;&nbsp;run(){<BR>for(int&nbsp;&nbsp;i=0;i&lt;100;i++){<BR>dec();<BR>}<BR>&nbsp;&nbsp;}<BR>&nbsp;&nbsp; 
      }<BR>}<BR>29、Java有没有goto?<BR>java中的保留字，现在没有在java中使用。<BR>30、启动一个线程是用run()还是start()?<BR>启动一个线程是调用start()方法，使线程所代表的虚拟处理机处于可运行状态，这意味着它可以由JVM调度并执行。这并不意味着线程就会立即运行。run()方法可以产生必须退出的标志来停止一个线程。<BR>31、EJB包括（SessionBean,EntityBean）说出他们的生命周期，及如何管理事务的？<BR>SessionBean：Stateless&nbsp;&nbsp;Session&nbsp;&nbsp;Bean&nbsp;&nbsp;的生命周期是由容器决定的，当客户机发出请求要建立一个Bean的实例时，EJB容器不一定要创建一个新的Bean的实例供客户机调用，而是随便找一个现有的实例提供给客户机。当客户机第一次调用一个Stateful&nbsp;&nbsp;Session&nbsp;&nbsp;Bean&nbsp;&nbsp;时，容器必须立即在服务器中创建一个新的Bean实例，并关联到客户机上，以后此客户机调用Stateful&nbsp;&nbsp;Session&nbsp;&nbsp;Bean&nbsp;&nbsp;的方法时容器会把调用分派到与此客户机相关联的Bean实例。<BR>EntityBean：Entity&nbsp;&nbsp;Beans能存活相对较长的时间，并且状态是持续的。只要数据库中的数据存在，Entity&nbsp;&nbsp;beans就一直存活。而不是按照应用程序或者服务进程来说的。即使EJB容器崩溃了，Entity&nbsp;&nbsp;beans也是存活的。Entity&nbsp;&nbsp;Beans生命周期能够被容器或者&nbsp;&nbsp;Beans自己管理。<BR>EJB通过以下技术管理实务：对象管理组织（OMG）的对象实务服务（OTS），Sun&nbsp;&nbsp;Microsystems的Transaction&nbsp;&nbsp;Service（JTS）、Java&nbsp;&nbsp;Transaction&nbsp;&nbsp;API（JTA），开发组（X/Open）的XA接口。<BR>32、应用服务器有那些？<BR>BEA&nbsp;&nbsp;WebLogic&nbsp;&nbsp;Server，IBM&nbsp;&nbsp;WebSphere&nbsp;&nbsp;Application&nbsp;&nbsp;Server，Oracle9i&nbsp;&nbsp;Application&nbsp;&nbsp;Server，jBoss，Tomcat<BR>33、给我一个你最常见到的runtime&nbsp;&nbsp;exception。<BR>ArithmeticException,&nbsp;&nbsp;ArrayStoreException,&nbsp;&nbsp;BufferOverflowException,&nbsp;&nbsp;BufferUnderflowException,&nbsp;&nbsp;CannotRedoException,&nbsp;&nbsp;CannotUndoException,&nbsp;&nbsp;ClassCastException,&nbsp;&nbsp;CMMException,&nbsp;&nbsp;ConcurrentModificationException,&nbsp;&nbsp;DOMException,&nbsp;&nbsp;EmptyStackException,&nbsp;&nbsp;IllegalArgumentException,&nbsp;&nbsp;IllegalMonitorStateException,&nbsp;&nbsp;IllegalPathStateException,&nbsp;&nbsp;IllegalStateException,&nbsp;&nbsp;ImagingOpException,&nbsp;&nbsp;IndexOutOfBoundsException,&nbsp;&nbsp;MissingResourceException,&nbsp;&nbsp;NegativeArraySizeException,&nbsp;&nbsp;NoSuchElementException,&nbsp;&nbsp;NullPointerException,&nbsp;&nbsp;ProfileDataException,&nbsp;&nbsp;ProviderException,&nbsp;&nbsp;RasterFormatException,&nbsp;&nbsp;SecurityException,&nbsp;&nbsp;SystemException,&nbsp;&nbsp;UndeclaredThrowableException,&nbsp;&nbsp;UnmodifiableSetException,&nbsp;&nbsp;UnsupportedOperationException<BR>34、接口是否可继承接口?&nbsp;&nbsp;抽象类是否可实现(implements)接口?&nbsp;&nbsp;抽象类是否可继承实体类(concrete&nbsp;&nbsp;class)?<BR>接口可以继承接口。抽象类可以实现(implements)接口，抽象类是否可继承实体类，但前提是实体类必须有明确的构造函数。<BR>35、List,&nbsp;&nbsp;Set,&nbsp;&nbsp;Map是否继承自Collection接口?<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      List，Set是，Map不是<BR>
      <HR>
    </TD></TR></TBODY></TABLE><!--页面结束部分-->
<DIV id=bottom align=center></DIV><BR>
<TABLE cellSpacing=0 cellPadding=0 width="98%" align=center border=0>
  <TBODY>
  <TR>
    <TD id=Footer_ads align=middle></TD></TR></TBODY></TABLE></BODY></HTML>
